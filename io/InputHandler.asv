classdef InputHandler
    properties
        Config          % Instance of Config class
        RawDataPath     % Path to raw data folder - *.mf4, set during processing
    end

    methods
        function obj = InputHandler(config)
            % Constructor: accepts a Config object
            obj.Config = config;
        end

        function visConfig = loadVisualizationConfig(obj)
            % Load visualization configuration from Config instance
            visConfig.Graphs = obj.Config.Graphs;               % All the graphs to be plotted
            visConfig.LineColors = obj.Config.LineColors;       % Line colors of these graphs
            visConfig.Calibratables = obj.Config.Calibratables; % struct of calibratables 
        end

        function processedData = processMF4Files(obj)
            % Process MF4 files: extract specified signals, save to MAT, and return processed data
            curFolder = pwd;
            
            % Prompt user to select folder with MF4 files
            seldatapath = uigetdir(curFolder, 'Select folder containing MF4 files');
            if seldatapath == 0
                fprintf('No folder selected. Operation cancelled.\n');
                processedData = {};
                return;
            end

            % Set RawDataPath to the selected folder
            obj.RawDataPath = seldatapath;

            % Verify if folder contains MF4 files
            files = dir(fullfile(seldatapath, '*.mf4'));
            if isempty(files)
                fprintf('No MF4 files found in selected folder: %s\n', seldatapath);
                cd(curFolder);
                processedData = {};
                return;
            end

            % Get signals to extract from Config
            map = obj.Config.Signals; 
            if isempty(map)
                fprintf('No signals specified in Config for extraction.\n');
                cd(curFolder);
                processedData = {};
                return;
            end

            % Initialize cell array to store processed data
            processedData = cell(1, length(files));
            N = length(files);
            fprintf('Found %d MF4 files to process...\n', N);

            % Process each MF4 file
            cd(seldatapath);
            for i = 1:N
                fullPath = fullfile(files(i).folder, files(i).name);
                [~, name, ~] = fileparts(fullPath);
                
                try
                    % Call internal method to process MF4 file
                    datVars = obj.processMF4FileInternally(fullPath, map);

                    % Save to .mat file in the same folder as MF4 files
                    matFileName = fullfile(seldatapath, [name '.mat']);
                    save(matFileName, 'datVars');
                    fprintf('Processed: %s, saved to %s\n', files(i).name, matFileName);

                    % Store processed data
                    processedData{i} = datVars;
                catch err
                    fprintf('Error processing %s: %s\n', files(i).name, err.message);
                    processedData{i} = [];
                end
            end

            cd(curFolder);
            fprintf('âœ… Processed %d MF4 files and saved to %s\n', N, seldatapath);
        end
    end

    methods (Access = private)
        function datVars = processMF4FileInternally(~, filePath, map)
            % Internal method to process MF4 file using mdf2mat_new
            % Determine the path to this class file
            classPath = fileparts(mfilename('fullpath'));
            projectRoot = fileparts(classPath);     % Move up to AEB_KPI_Project
            utilsPath = fullfile(projectRoot, 'utils');
            
            if exist(utilsPath, 'dir')
                addpath(utilsPath);
            else
                error('Utils folder not found at %s. Please ensure the utils folder exists.', utilsPath);
            end

            try
                % Call mdf2mat_new as if it were a member function
                [datVars, ~, ~, ~, ~, ~] = mdf2mat_new(filePath, ...
                    'SignalDataBase', map, ...
                    'Resample', 0.01);
            catch err
                rethrow(err);
            end

            % Remove utils path after use (optional)
            rmpath(utilsPath);
        end
    end
end